use chess_academy_1;

create table authentication(
  id int unsigned primary key auto_increment,
  user_type varchar(10) not null,
  email varchar(100) unique not null,
  hashed_password varchar(40) not null,
  created_at bigint unsigned not null
);


create table profile(
  auth_id int unsigned not null,
  fullname varchar(100) not null,
  country varchar(3) not null,
  state varchar(20) not null,
  description varchar(200),
  user_image blob,
  fide_id varchar(10),
  contact varchar(12) not null unique,
  alt_contact varchar(12),
  contact_code varchar(3) not null,
  alt_contact_code varchar(3),
  lichess_id varchar(10),
  dob date not null,
  parent varchar(100),
  is_private_contact boolean not null,
  is_private_alt_contact boolean,
  is_private_dob boolean not null,
  is_private_parent boolean,
  primary key(contact_code, contact),
  constraint foreign key(auth_id) references authentication(id)
  on delete cascade
  on update cascade
);


create table classroom(
	id int unsigned auto_increment,
	name varchar(80) not null unique,
	description varchar(200),
	is_active boolean not null,
	created_at bigint unsigned not null,
  	primary key(id)
);

create table mapping_student_classroom(
  student_id int unsigned not null,
  classroom_id int unsigned not null,
  PRIMARY KEY (student_id, classroom_id),
  created_at bigint unsigned not null,
  constraint foreign key(student_id) references authentication(id),
  constraint foreign key(classroom_id) references classroom(id)
  on delete cascade
  on update cascade
);


create table mapping_coach_classroom(
  coach_id int unsigned not null,
  classroom_id int unsigned not null,
  PRIMARY KEY (coach_id, classroom_id),
  created_at bigint unsigned not null,
  constraint foreign key(coach_id) references authentication(id),
  constraint foreign key(classroom_id) references classroom(id)
  on delete cascade
  on update cascade
);


create table class(
  id int unsigned auto_increment,
  classroom_id int unsigned not null,
  start_time bigint unsigned not null,
  start_time_actual bigint unsigned,
  end_time_actual bigint unsigned,
  duration int,
  created_at bigint unsigned not null,
  class_hash varchar(32) not null unique,
  primary key(id),
  constraint foreign key(classroom_id) references classroom(id)
  on delete cascade
  on update cascade
  );

create table question(
  id int unsigned auto_increment,
  class_id int unsigned not null,
  description varchar(100) not null,
  fen_question varchar(100) not null,
  deadline bigint unsigned not null,
  created_at bigint unsigned not null,
  primary key(id),
  constraint foreign key(class_id) references class(id)
  on delete cascade
  on update cascade
  )

  create table solution(
  question_id int unsigned not null,
  student_id int unsigned not null,
  pgn varchar(1000) not null,
  is_evaluated boolean default false,
  score int,
  comments varchar(1000),
  updated_at bigint unsigned not null,
  primary key(question_id,student_id),
  constraint foreign key(question_id) references question(id)
  on delete cascade
  on update cascade,
  constraint foreign key(student_id) references authentication(id)
  on delete cascade
  on update cascade
  );
  
insert into authentication(
  user_type,
  email,
  hashed_password,
  created_at
)
values(
  'admin',
  'admin@test.com',
  '7c4a8d09ca3762af61e59520943dc26494f8941b',
  unix_timestamp(utc_timestamp())*1000
);


select
classroom.id,
classroom.name,
classroom.description,
count(profile.fullname) as student_count
from
classroom,
mapping_student_classroom,
mapping_coach_classroom,
profile
where
mapping_coach_classroom.coach_id = 3 and
classroom.id = mapping_coach_classroom.classroom_id and
mapping_student_classroom.classroom_id = classroom.id and
mapping_student_classroom.student_id = profile.auth_id
group by
classroom.id

select
classroom.id,
classroom.name,
classroom.description,
group_concat(profile.fullname) as coaches
from
classroom,
mapping_student_classroom,
mapping_coach_classroom,
profile
where
mapping_student_classroom.student_id = 4 and
classroom.id = mapping_student_classroom.classroom_id and
mapping_coach_classroom.classroom_id = classroom.id and
mapping_coach_classroom.coach_id = profile.auth_id
group by
classroom.id

select
	students_result.cid as classroom_id,
    coaches_result.cname as classroom_name,
    coaches_result.description,
    coaches_result.created_at,
    coaches_result.coaches,
    students_result.students
from
(SELECT ms.classroom_id as cid, count(ms.student_id) as students from mapping_student_classroom as ms
group by ms.classroom_id) students_result
INNER JOIN
(select classroom.id as cid, classroom.name as cname, classroom.description as description,
    classroom.is_active, classroom.created_at,
    GROUP_CONCAT(p.fullname) as coaches
    from
        classroom LEFT JOIN mapping_coach_classroom as mc ON classroom.id = mc.classroom_id,
		profile as p
 	where
 		coach_id = p.auth_id
	group by
        classroom.id) AS coaches_result
 ON students_result.cid = coaches_result.cid



 select
    concat(solution.student_id,solution.question_id) as solution_id,
    question.id as question_id,
    question.class_id,
    question.description,
    question.fen_question,
    question.deadline as question_deadline,
    question.created_at question_created_at,
    solution.student_id,
    solution.pgn,
    solution.score,
    solution.comments,
    solution.is_evaluated,
    solution.updated_at as solution_updated_at
  from
    question
    left outer join (
      select
        *
      from
        solution
      where
        student_id = ${filters.student_id}
    ) as solution on solution.question_id = question.id
  where
  ${(filters.class_id) ? `class_id in (${filters.class_id}) and\n` : ``}
    class_id in (
    select
      id as class_id
    from
      class
    where
      ${(filters.classroom_id) ? `classroom_id in (${filters.classroom_id}) and\n` : ``}
      classroom_id in (
        select
          classroom_id
        from
          mapping_student_classroom
        where
        student_id = ${filters.student_id}
      )
  )
  ;



  select
    concat(solution.student_id,solution.question_id) as solution_id,
    question.id as question_id,
    question.class_id,
    question.description,
    question.fen_question,
    question.deadline as question_deadline,
    question.created_at question_created_at,
    solution.student_id,
    solution.pgn,
    solution.score,
    solution.comments,
    solution.is_evaluated,
    solution.updated_at as solution_updated_at
  from
    question
    left outer join (
      select
        *
      from
        solution
      where
        student_id = ${filters.student_id}
    ) as solution on solution.question_id = question.id
  where
    question.class_id = ${filters.class_id}